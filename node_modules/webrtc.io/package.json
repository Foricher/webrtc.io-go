{
  "name": "webrtc.io",
  "version": "0.0.0-1",
  "description": "Abstraction for webRTC.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/cavedweller/webRTC.io.git"
  },
  "dependencies": {
    "webrtc.io-client": "latest",
    "socket.io": "latest"
  },
  "keywords": [
    "webrtc"
  ],
  "author": {
    "name": "Ben Brittain"
  },
  "contributors": [
    {
      "name": "Ben Brittain",
      "email": "ben@brittain.org"
    },
    {
      "name": "Dennis MÃ¥rtensson",
      "email": "me@dennis.is"
    },
    {
      "name": "David Peter",
      "email": "david.a.peter@gmail.com"
    }
  ],
  "license": "MIT",
  "readme": "# webRTC.io\n### [demo](http://multiwebrtc.nodejitsu.com)\nAn abstraction layer for webRTC. Aim is to simplify the HTML5 web standard webRTC in a similar manner to socket.io w/ websockets. This project is still in an infintile stage, please send feature requests (or pulls!) to us as well as bug reports.\n\n## What is webRTC?\nwebRTC is a new webstandard being developed for peer-to-peer communication on the web. This means that browsers will be able to send information, without sending information through the server. Server side this will reduce load dramatically. \n\nCurrently the webRTC standard is very focused on the video & audio aspects of the project. In the future (hopefully near future!) they will begin implementing the data channel, which will allow arbitrary data to be sent peer-to-peer. For now the webRTC team is focused on stabalizing and optimizing the video and audio channels.\n\nUnfortunately, a server (or two) will still be required for two reasons, The media for the page must be initially supplied, and the server, in conjunction with a [STUN server](http://en.wikipedia.org/wiki/STUN) (abstracted away by the webRTC.io library), is required to synchronize the connections.\n\n## Browser Support\nwebRTC is supported in very few browsers. We recommend either chrome from either the dev channel or the canary release.\nAfter installation, go to [About://flags](chrome://flags/). Enable\n```\nEnable Media Source API on <video> elements. (this may be unnecessary)\nEnable MediaStream (this may be unnecessary)\nEnable PeerConnection\n```\n\n## Demo\nThis is a multi-person chat room demo written using our webRTC.io library. [Example Site](http://multiwebrtc.nodejitsu.com) & [Repository](http://www.github.com/dennismartensson/webrtc.io-demo/) (browser support section still applies!)\n\n## Installation\n```bash\n npm install \n```\nfor absurdly detailed instruction on setting up the demo, go to the demo repo.\n## Example code\n\n### Client\n\n\n```html\n<video id=\"local\" autoplay></video>\n<script src=\"/socket.io/socket.io.js\"></script>\n<script src=\"/webrtc.io/webrtc.io.js\"></script>\n<script>\n  rtc.createStream('local');\n  rtc.connect('http://yourserveraddress');\n  rtc.on('ready', function() {\n    // all streams are loaded\n  });\n</script>\n```\n\n### Server\n\n```javascript\nvar io = require('webrtc.io').listen(8000);\n// this is a simple wrapper around socket.io, so you can define your own events\n// like so:\nio.sockets.on('connection', function(socket) {\n  socket.on('chat', function(nick, message) {\n    socket.broadcast.emit('chat', nick, message);\n  });\n});\n```\n\n## Stumped?\n```\n#webrtc.io on freenode\n```\n\nWe've done house calls in the past (also known as walking down the hall)... we'll totally do it again if you fly us out!\n\n\n### Collaborators\n[@dennismatensson](https://github.com/dennismartensson)\n[@cavedweller](https://github.com/cavedweller)\n[@sarenji](https://github.com/sarenji)\n",
  "_id": "webrtc.io@0.0.0-1",
  "_from": "webrtc.io@latest"
}
